Get cluster info
    kubectl cluster-info

Feed config file to kubectl
    kubectl apply -f <path_to_config_file> (deployment file goes to the k8s master)
    kubectl apply -f <directory_of_config> (this will apply all the configs which is present inside a directory)

Get status of any k8s object
    kubectl get <object_name> (object_name can be pods, services)
    kubectl get pods
    kubectl get services
    kubectl get deployments
    
    kubectl get <object_name> -o wide (get detailed list of object)

Get objects running in all namespaces
    kubectl get <object_name> --all-namespaces

Inspect a particular object
    kubectl describe <object_type> <object_name>

Delete the existing object
    kubectl delete -f <path_to_config_file> (config file which was used to create this resource, this is an imperative update)

Imperative command to update image
    kubectl set image <object_type>/<object_name> <container_name>=<new_image>
    kubectl set image deployment/client-deployment client=privaterepo/multi-client:v1

Get logs from pods
    kubectl logs <pod_name>

Get available storage classes
    kubectl get storageclass

Get available persistent volumens
    kubectl get pv

Get available persistent volumens claims
    kubectl get pvc

Create secret
    kubectl create secret generic <secret_name> --from-literal key=value

Get secrets
    kubectl get secret

Create service-account
    kubectl create serviceacount --namespace <namespace> <serviceacount_name>

Create ClusterRoleBinding
    kubectl create clusterrolebinding <role_name> --clusterrole=cluster-admin --serviceacount=<namespace:serviceacount_name>